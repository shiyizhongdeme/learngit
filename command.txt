pwd			显示用户当前所处的路径
ls 			显示当前文件夹下的内容
rm -rf		删除文件或文件夹
cd			改变当前用户的目录
mkdir		创建文件夹
git init	创建版本库（告诉git在哪里安家）
git config --global user.name "Your Name"		创建用户名
git config --global user.email "email@example.com"		
git add File1name file2name 把要添加的文件放到台面上
git commit -m "修改提示信息"  把添加或改变的文件正式放入仓库
git status 查看当前版本是否和仓库版本一致
git diff	显示哪些地方不一样
git log		查看用户显示修改的信息(git log --pretty-oneline :美化git log 的信息)
git reset --hard versionName(通过git看到的16进制版本号，一般前6位即可)回退到某个时间的版本
cat 文件名	显示文件内容
git reset --hard HEAD~x	指向哪个版本。就回到哪个版本（工作区的版本就是谁）
git reflog	展示穿梭的过程（用来后悔）
touch 		创建文件夹
vi			进入文件编辑模式(一般模式--dd删除光标所在行,--x删除单个字符、命令模式--wq&x保存退出、插入模式--按键"i")
git 分区 工作区,暂存区,支线库;commit的内容只是暂存区的内容，如果工作区没有add，那么工作区的改变就不会 commit
当维护多个不重名的文件时,git 的这些所有命令多可以指定文件名  (git diff HEAD -- 文件名  只比较版本库中的文件和工作区的文件的区别)
git checkout --文件名	还原仓库中的HEAD(慎用)
git reset HEAD --文件名		放弃暂存区的内容，同事把工作区的内容还原到HEAD状态